# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_output_generation.ipynb.

# %% auto 0
__all__ = ['convert_latex_to_text', 'data_combine', 'generate_output', 'continue_prompt', 'm4th_assistant', 'data_clean']

# %% ../nbs/01_output_generation.ipynb 4
import os
import nbdev
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import openai
from openai import OpenAI
from pylatexenc.latex2text import LatexNodes2Text


# %% ../nbs/01_output_generation.ipynb 5
def convert_latex_to_text(latex_output):

    scan_txt = LatexNodes2Text().latex_to_text(latex_output)

    return scan_txt

# %% ../nbs/01_output_generation.ipynb 6
def data_combine(scan_text):
    """
    This functions attach two strings 
    """
    prompt =  """
    Assist with Mathematical Problems: Your primary goal is to help users solve math problems. You use a structured approach that emphasizes clarity and step-by-step explanations. 
    Use language for Explanations: All explanations are provided in plain language to ensure they are understandable and accessible. 
    Avoidance of Programming for Calculations: Unlike some other models that may use programming languages like Python for calculations, You are instructed to rely solely on mathematical principles and reasoning for solving problems.
    Integrate Theories or Specific Methods: If a user provides a specific theory or method they want to use, you'll incorporate it into the problem-solving process.
    Organize Responses for Easy Understanding: Your responses are organized meticulously to facilitate ease of understanding and learning.
    Here is how your answers are organized:
    1 - Start by clearly defining the problem or concept on your own, and completely understand it (without telling the user).
    2 - If the solution is correct, just say “Correct” and end the conversation. If not, continue:
    2.1 - Identify Key Concepts: Highlight the core mathematical principles or formulas that are relevant to solving the problem or understanding the concept.
    2.2 - Identify the weakness of the solution: Identify which part of the solution is incorrect and tell me, without giving the solution. Ask me if I want to continue afterwards, stop if not.
    3 - Step-by-Step Solution: If I say yes, provide a straightforward, step-by-step approach to solve the problem, including only essential steps and reasoning.
    4 - Quick guidance: Present further links for me to learn about the relevant topic. Keep it short, ensuring it directly addresses the question.
    Handling Non-Math Queries: When presented with a question outside your expertise, you won't answer directly but will offer a funny (yet not cheesy) reply that aims to satisfy the user's curiosity in a light-hearted way.
    Handling Problems with No Solution: In cases where there's no solution to a problem, you'll walk the user through the problem, offering hints on potential starting points. You'll make it clear that while a solution isn't available, there's value in exploring the problem from these angles.
    Your guidance remains concise and to the point.
    """
    scan_text_prompt = prompt + scan_text
    return scan_text_prompt

# %% ../nbs/01_output_generation.ipynb 7
def generate_output(scan_text_prompt, model='gpt-4'):

    # Instantiate the OpenAI client with the API key.
    client = openai.OpenAI(api_key="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")
    
    try:
        # Make the API call to OpenAI for generating predictions.
        response = client.chat.completions.create(
            model=model,
            messages=[
                {
                    "role": "user",
                    "content": scan_text_prompt
                }
            ]
        )

        full_response = response.choices[0].message.content

    except Exception as e:
        # Handle any errors that occur during the API call.
        print(f"An error occurred while calling OpenAI API: {e}")

    return full_response

# %% ../nbs/01_output_generation.ipynb 8
def continue_prompt(latex_output, global_output):
    continue_prompt_text = "This is my prior input:" + latex_output + "This is your prior output:" + global_output + "I don't quite understand it. Could you explain more?"
    return continue_prompt_text

# %% ../nbs/01_output_generation.ipynb 9
def m4th_assistant(latex_output):

    global_output = None
    global_scan_text_prompt = None

    def output_generation():
        global_scan_text_prompt = data_combine(latex_output)
        global_output = generate_output(global_scan_text_prompt)
        return global_output
    
    def continue_exploring():
        continue_prompt_text = continue_prompt(latex_output,global_output)
        cotinue_output = generate_output(continue_prompt_text)
        return cotinue_output
    
    def memory_initial():
        global_output = None
        global_scan_text_prompt = None

# %% ../nbs/01_output_generation.ipynb 10
def data_clean():
    return
